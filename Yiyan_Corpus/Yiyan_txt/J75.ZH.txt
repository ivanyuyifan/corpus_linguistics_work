第3章 数据链路层
在本章，我们将学习网络模型中的第二层（即数据链路层）的设计原则。
学习内容涉及两台相邻机器实现可靠有效的完整信息块（称为帧）通信的一些算法，而不像物理层那样只关注单个比特传输。
这里的相邻指两台机器通过一条通信信道连接起来，通信信道在概念上就像一条线路（比如同轴电缆、电话线或者无线信道）。
信道像一条线路的本质特性使得信道上传递的比特顺序与发送顺序完全相同。
刚开始，你可能认为这个问题非常简单，似乎没有什么内容需要学习――机器A把比特放到线路上，然后机器B将这些比特取下来。
不幸的是，通信线路偶尔会出错。
而且，它们只有有限的数据传输率，并且在比特的发送时间和接收时间之间存在一个非零延迟。
这些限制对数据传输的效率有非常重要的影响。
通信所采用的协议必须考虑所有这些因素。
这些协议正是本章的主题。
在介绍了数据链路层的关键设计问题之后，我们将通过考察错误的本质以及如何检测和纠正这些错误来开始数据链路层协议的学习。
然后，我们将学习一系列复杂性逐步递增的协议，每个协议解决了本层中越来越多的问题。
最后，我们将给出一些数据链路层协议的例子来结束本章。
3.1 数据链路层的设计问题
数据链路层使用物理层提供的服务在通信信道上发送和接收比特。
它要完成一些功能，包括：
（1）向网络层提供一个定义良好的服务接口。
（2）处理传输错误。
（3）调节数据流，确保慢速的接收方不会被快速的发送方淹没。
为了实现这些目标，数据链路层从网络层获得数据包，然后将这些数据包封装成帧（frame）以便传输。
每个帧包含一个帧头、一个有效载荷（用于存放数据包）以及一个帧尾，如图3-1所示。
帧的管理构成了数据链路层工作的核心。
在后面的章节中，我们将详细地讨论上面提到的这些问题。
图3-1数据包和帧的关系
虽然本章明确讨论数据链路层及其协议，但是，我们在本章中学习的许多原理，比如错误控制和流量控制等同样可以在传输层和其他协议中寻觅到类似的踪迹。
这是因为可靠性是网络的总目标，这个目标的实现需要各层次的紧密配合。
实际上，在许多网络中，这些功能最常出现的地方是上层，数据链路层只要做很少的一点工作就已经“足够好”。
然而，不管它们出现在哪里，原理是非常一致的。
在数据链路层中，它们通常表现出最为简单和纯粹的形式，因此，数据链路层是详细学习这些原理的绝佳之地。
3.1.1 提供给网络层的服务
数据链路层的功能是为网络层提供服务。
最主要的服务是将数据从源机器的网络层传输到目标机器的网络层。
在源机器的网络层有一个实体（称为进程），它将一些比特交给数据链路层，要求传输到目标机器。
数据链路层的任务就是将这些比特传输给目标机器，然后再进一步交付给网络层，如图3-2（a）所示。
实际的传输过程则是沿着图3-2（b）所示的路径进行的，但很容易将这个过程想象成两个数据链路层的进程使用一个数据链路协议进行通信。
基于这个原因，在本章中我们将隐式使用图3-2（a）的模型。
图3-2（a）虚拟通信；（b）实际通信
数据链路层可以设计成向上提供各种不同的服务。
实际提供的服务因具体协议的不同而有所差异。
一般情况下，数据链路层通常会提供以下3种可能的服务：
（1）无确认的无连接服务。
（2）有确认的无连接服务。
（3）有确认的有连接服务。
无确认的无连接服务是指源机器向目标机器发送独立的帧，目标机器并不对这些帧进行确认。
以太网就是一个提供此类服务的数据链路层极好实例。
采用这种服务，事先不需要建立逻辑连接，事后也不用释放逻辑连接。
若由于线路的噪声而造成了某一帧的丢失，数据链路层并不试图去检测这样的丢帧情况，更不会去试图恢复丢失的帧。
这类服务合适两种场合，第一种是错误率很低的场合，此时差错恢复过程可以留给上层来完成；
第二种是实时通信，比如语音传输，因为在实时通信中数据迟到比数据受损更糟糕。
迈向可靠性的下一步是有确认的无连接服务。
当向网络层提供这种服务时，数据链路层仍然没有使用逻辑连接，但其发送的每一帧都需要单独确认。
这样，发送方可知道一个帧是否已经正确地到达目的地。
如果一个帧在指定的时间间隔内还没有到达，则发送方将再次发送该帧。
这类服务尤其适用于不可靠的信道，比如无线系统。802.11（WiFi）就是此类服务的一个很好例子。
或许有一点值得强调，那就是在数据链路层提供确认只是一种优化手段，永远不应该成为一种需求。
网络层总是可以发送一个数据包，然后等待该数据包被确认。
如果在计时器超时之前，该数据包的确认还没有到来，那么发送方只要再次发送整个报文即可。
这一策略的麻烦在于它可能导致传输的低效率。
链路层对帧通常有严格的长度限制，这是由硬件所决定的；除此之外，还有传播延迟。
但网络层并不清楚这些参数。
网络层可能发出了一个很大的数据包，该数据包被拆分并封装到（比如说）10个帧中，而且20%的帧在传输中被丢失，那么这个数据每可能需要花很长的时间才能传到接收方。
相反地，如果每个帧都单独确认和必要时重传，那么出现的差错就能更直接并且更快地被检测到。
在可靠信道上，比如光纤，重量级数据链路协议的开销可能是不必要的；但在无线信道上，由于信道内在的不可靠性，这种开销还是非常值得的。
我们再回到有关服务的话题上，数据链路层向网络层提供的最复杂服务是面向连接的服务。
采用这种服务，源机器和目标机器在传输任何数据之前要建立一个连接。
连接上发送的每一帧都被编号，数据链路层确保发出的每个帧都会真正被接收方收到。
它还保证每个帧只被接收一次，并且所有的帧都将按正确的顺序被接收。
因此，面向连接的服务相当于为网络层进程提供了一个可靠的比特流。
它适用于长距离且不可靠的链路，比如卫星信道或者长途电话电路。
如果采用有确认的无连接服务，可以想象丢失了确认可能导致一个帧被收发多次，因而将浪费带宽。
当使用面向连接的服务时，数据传输必须经过三个不同的阶段。
在第一个阶段，要建立连接，双方初始化各种变量和计数器，这些变量和计数器记录了哪些帧已经接收到，哪些帧还没有收到。
在第二个阶段，才真正传输一个或者多个数据帧。
在第三个也是最后一个阶段中，连接被释放，所有的变量、缓冲区以及其他用于维护该连接的资源也随之被释放。
3.1.2 成帧
为了向网络层提供服务，数据链路层必须使用物理层提供给它的服务。
物理层所做的只是接收一个原始比特流，并试图将它传递给目标机器。
如果信道上存在噪声，就像大多数无线链路和某些有线链路那样，物理层就会在它的信号中添加某种冗余，以便将误码率降到一定程度。
然而，数据链路层接收到的比特流不能保证没有错误。
某些比特的值可能已经发生变化，接收到的比特个数可能少于、等于或者多于发送的比特数量。
检测错误和纠正错误（有必要的话）的工作正是数据链路层该做的。
对于数据链路层来说，通常的做法是将比特流拆分成多个离散的帧，为每个帧计算一个称为校验和的短令牌（本章后面将讨论校验和算法），并将该校验和放在帧中一起传输。
当帧到达目标机器时，要重新计算该帧的校验和。
如果新算出来的校验和与该帧中包含的校验和不同，则数据链路层知道传输过程中产生了错误，它就会采取措施来处理错误（比如丢掉坏帧，可能还会发回一个错误报告）。
拆分比特流的实际工作比初看上去的要复杂得多。
一个好的设计方案必须使接收方很容易发现一个新帧的开始，同时所使用的信道带宽要少。
我们将考察下列4种方法：
（1）字节计数法。
（2）字节填充的标志字节法。
（3）比特填充的标志比特法。
（4）物理层编码违禁法。
第一种成帧方法利用头部中的一个字段来标识该帧中的字符数。
当接收方的数据链路层看到字符计数值时，它就知道后面跟着多少个字节，因此也就知道了该帧在哪里结束。
这项技术如图3-3（a）所示，其中4帧的大小分别为5、5、8和8个字节。
这个算法的问题在于计数值有可能因为一个传输错误而被弄混。
例如，如果第2帧中的计数值5由于一个比特反转而变成了7，如图3-3（b）所示，则接收方就会失去同步，它再也不可能找到下一帧的正确起始位置。
即使校验和不正确，接收方知道该帧己经被损坏，它仍然无法知道下一帧从哪里开始。
在这种情况下，给发送方发回一个帧，要求重传也无济于事，因为接收方并不知道应该跳过多少个字节才能到达重传的开始处。
正是由于这个原因，字节计数方法本身很少被使用。
图3-3字节流（a）没有错误；（b）有一个错误
第二种成帧方法考虑到了出错之后的重新同步问题，它让每个帧用一些特殊的字节作为开始和结束。
这些特殊字节通常都相同，称为标志字节（flag byte），作为帧的起始和结束分界符，如图3-4（a）中的FLAG所示。
两个连续的标志字节代表了一帧的结束和下一帧的开始。
因此，如果接收方丢失了同步，它只需搜索两个标志字节就能找到当前帧的结束和下一帧的开始位置。
然而，还有问题必须要解决。
当标志字节出现在数据中时，尤其是当传输二进制数据（比如照片或歌曲）时，这种情景往往会严重干扰到帧的分界。
有一种方法可以解决这个问题，发送方的数据链路层在数据中“偶尔”出现的每个标志字节的前面插入一个特殊的转义字节（ESC）。